#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 5
#define SCROLL 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E             &kp R           &kp T                                           &kp Y             &kp U  &lt 5 I    &kp O    &kp P
&kp A      &kp S         &kp D             &kp F           &kp G                            &kp F5         &kp H             &kp J  &kp K      &kp L    &kp SQT
&kp Z      &kp X         &kp C             &kp V           &kp B             &lt 6 ESC      &kp BACKSPACE  &kp N             &kp M  &kp COMMA  &kp DOT  &lt 4 SLASH
&lt 1 TAB  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &lt 5 LANGUAGE_2  &lt 2 SPACE    &lt 1 ENTER    &lt 3 LANGUAGE_1                             &kp MINUS
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        symbol {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans            &trans  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                          &kp F12
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        number {
            bindings = <
&kp EQUAL        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                           &kp N1  &kp N2  &kp N3  &kp N4  &kp N5
&kp PERIOD       &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS                  &trans  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
&kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp ASTERISK  &kp SLASH    &trans  &trans  &trans  &trans  &trans  &trans
&trans           &trans           &trans           &trans           &trans        &trans       &trans  &trans                          &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        cursor {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans    &kp UP    &trans     &trans
&trans  &trans  &trans  &trans  &trans            &trans  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans    &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                                 &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        mouse {
            bindings = <
&trans     &trans          &msc SCRL_UP    &trans           &trans                              &trans  &trans  &trans    &trans    &trans
&kp LG(A)  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &trans                      &trans  &trans  &trans  &mkp MB3  &mkp MB4  &trans
&trans     &kp LG(X)       &kp LG(C)       &kp LG(V)        &trans            &trans    &trans  &trans  &trans  &mkp MB1  &mkp MB2  &trans
&trans     &trans          &trans          &trans           &kp LEFT_COMMAND  &trans    &trans  &trans                              &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        shortcut {
            bindings = <
&none      &none      &kp LG(LS(NUMBER_3))  &kp LG(LS(NUMBER_4))  &none                      &none  &none  &none  &none  &none
&kp LG(A)  &kp LG(S)  &none                 &none                 &none               &none  &none  &none  &none  &none  &none
&none      &kp LG(X)  &kp LG(C)             &kp LG(V)             &kp LG(B)  &none    &none  &none  &none  &none  &none  &kp LG(FSLH)
&none      &none      &none                 &none                 &none      &none    &none  &none                       &none
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        conect {
            bindings = <
&none  &none  &none  &none  &none                  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&none  &none  &none  &none  &none           &none  &out OUT_BLE  &out OUT_USB  &none         &none         &bootloader
&none  &none  &none  &none  &none  &none    &none  &none         &none         &none         &none         &bt BT_CLR
&none  &none  &none  &none  &none  &none    &none  &none                                                   &bt BT_CLR_ALL
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        layer_7 {
            bindings = <
&kp NUMBER_7  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
&trans        &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans  &trans  &trans  &trans  &trans    &trans  &trans                          &trans
            >;
        };

        layer_8 {
            bindings = <
&kp NUMBER_8  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
&trans        &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans  &trans  &trans  &trans  &trans    &trans  &trans                          &trans
            >;
        };
    };
};
